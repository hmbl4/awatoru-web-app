{% extends "_layout" %}

{% requireLogin %}

{% block content %}
{% set products = craft.entries.section('products') %}


{% include '_snippets/header-block' with
    {
      title: "Order Form",
      description:"Order here..."
    }
%}

{# <form action="https://formspree.io/mayyldgw" method="POST">
  <input type="text" placeholder="text" name="name">
  <input type="email" placeholder="email" name="_replyto">
  <label for="available-products">Products:</label>
  <input id="products-requested" type="hidden" name="products" value="">

  <ul>
    {% for product in products %}
      <li style="list-style-type: none;margin-left:-1rem;">
        <input type="checkbox" name="product-check-{{loop.index}}" class="product-checkbox" data-val="{{ product.productName }}">
        <label for="product-check-{{loop.index}}" class="feed__box__product__outer--name mt-0">{{ product.productName }}</label>
      </li>
    {% endfor %}
  </ul>
  <p class="error-fromEmail error error-hidden">Your product selection cannot be blank.</p>

  <input type="submit" value="Send">
</form> #}



{# maybe add an option here for a product they'd like to request, like an other option #}

<form method="post" id="form" action="" accept-charset="UTF-8">
    {{ csrfInput() }}
    <input type="hidden" name="action" value="contact-form/send">
    {{ redirectInput('contact/?res=tks') }}
    <div class="row">
      <div class="col-md-6">
        <div class="form-group">
          <label for="from-name">Name</label>
          <input id="from-name" type="text" class="form-control" name="fromName" value="{{ message.fromName ?? '' }}">
          <p class="error-fromName error error-hidden">Your Name cannot be blank</p>
        </div>
      </div>

      <div class="col-md-6">
        <div class="form-group">
          <label for="from-email">Email</label>
          <input id="from-email" type="email" class="form-control" name="fromEmail" value="{{ message.fromEmail ?? '' }}">
          <p class="error-fromEmail error error-hidden">Your Email cannot be blank.</p>
        </div>
      </div>

      <div class="col-md-12">
        <div class="form-group">
          <label for="message">Message</label>
          <textarea rows="2" cols="100%"  class="form-control" id="message" name="message">{{ message.message ?? '' }}</textarea>
          <p class="error-message error error-hidden">Your Message cannot be blank</p>
        </div>
      </div>
    </div>

    <input id="form-type" type="hidden" name="OrderForm" value="Order Form">


    <label for="available-products">Products:</label>
    <input id="products-requested" type="hidden" name="products" value="">

    <ul>
      {% for product in products %}
        <li style="list-style-type: none;margin-left:-1rem;">
          <input type="checkbox" name="product-check-{{loop.index}}" class="product-checkbox" data-val="{{ product.productName }}">
          <label for="product-check-{{loop.index}}" class="feed__box__product__outer--name mt-0">{{ product.productName }}</label>
        </li>
      {% endfor %}
    </ul>
    <p class="error-fromEmail error error-hidden">Your product selection cannot be blank.</p>

    <div class="alert alert-success thanks" role="alert">Sent successfully! We will be in touch, thanks.</div>

    <input type="submit" class="btn btn-purchase" value="Order Now">
</form>


    <script type="text/javascript">

    $( document ).ready(function() {
      console.log( "ready!" );
      $('#form').submit(function(event) {
          event.preventDefault();
          console.log("preventDefault!");
          $('.error').slideUp();
          $.post({
              url: '/',
              dataType: 'json',
              data: $(this).serialize(),
              success: function(response) {
                  console.log(response)
                  if (response.success) {
                      console.log("Worked.");
                      $('.thanks').fadeIn();
                  } else {
                      $('.thanks').fadeOut();
                      console.log("Didn't work.");
                      $('.error').slideUp();
                      for (i in response.errors) {
                        var className = '.error-'+i
                        console.log(className);
                        $(className).slideDown();
                      }
                  }
              },
              failure: function(result){
                  console.log("FAILED");
                  console.log(result);
              }
          });
        });

        // console.log( "ready!" );
        $(".product-checkbox").on('change',function(event){
          var productList = []
          $(".product-checkbox").each(function(){
            if ($(this).is(':checked') ) {
              productList.push( $(this).data('val') );
            }
          })
          console.log(productList)
          $('#products-requested').val(productList)
        });
      });


    </script>


{# todo #}

{# implement and check i can implement texting with ajax post requests or webhooks. #}

{# upgrade craft to match to download this: #}
{# https://plugins.craftcms.com/webhooks #}

{# https://zapier.com/apps/twilio/integrations #}

{# https://zapier.com/apps/twilio/integrations/google-sheets #}


{% endblock %}
